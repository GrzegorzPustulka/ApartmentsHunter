version: '3.8'

services:
  hunter_worker:
    build:
      context: ./hunter
      dockerfile: Dockerfile
    container_name: hunter_worker
    command: poetry run celery -A hunter.celery_app worker --loglevel=info
    volumes:
      - ./hunter:/app
    depends_on:
      - rabbitmq
      - redis
    env_file:
      - .env

  hunter_beat:
    build:
      context: ./hunter
      dockerfile: Dockerfile
    container_name: hunter_beat
    command: poetry run celery -A hunter.celery_app beat --loglevel=info
    volumes:
      - ./hunter:/app
    depends_on:
      - rabbitmq
      - redis
    env_file:
      - .env

  pricer:
    build:
      context: ./pricer
      dockerfile: Dockerfile
    container_name: pricer
    command: poetry run celery -A pricer.celery_app worker --loglevel=info
    volumes:
      - ./pricer:/app
    depends_on:
      - rabbitmq
      - redis
    env_file:
      - .env

  writer:
    build:
      context: ./writer
      dockerfile: Dockerfile
    container_name: writer
    command: poetry run celery -A writer.celery_app worker --loglevel=info
    volumes:
      - ./writer:/app
    depends_on:
      - rabbitmq
      - redis
      - mongo
    env_file:
      - .env

  matcher:
    build:
      context: ./matcher
      dockerfile: Dockerfile
    container_name: matcher
    command: poetry run python matcher/main.py
    volumes:
      - ./matcher:/app
    depends_on:
      - rabbitmq
      - redis
      - mongo
      - postgres
    env_file:
      - .env
    entrypoint: >
      bash -c "
      while ! curl -s http://mongo:27017 > /dev/null; do
        echo 'Waiting for MongoDB to be ready...'
        sleep 5
      done;
      echo 'MongoDB is ready. Starting matcher...';
      exec poetry run python matcher/main.py
      "

  matcher_worker:
    build:
      context: ./matcher
      dockerfile: Dockerfile
    container_name: matcher_worker
    command: poetry run celery -A matcher.celery_app worker --loglevel=info
    volumes:
      - ./matcher:/app
    depends_on:
      - rabbitmq
      - redis
      - mongo
      - postgres
    env_file:
      - .env

  sender:
    build:
      context: ./sender
      dockerfile: Dockerfile
    container_name: sender
    command: poetry run celery -A sender.celery_app worker --loglevel=info
    volumes:
      - ./sender:/app
    depends_on:
      - mailhog
      - rabbitmq
      - redis
    env_file:
      - .env

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  subscriptions:
    build:
      context: ./subscriptions
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    container_name: subscriptions
    command: bash -c "alembic upgrade head && poetry run uvicorn subscriptions.main:app --host 0.0.0.0 --port 8000 --reload"
      - ./subscriptions:/app
    depends_on:
      - postgres
    env_file:
      - .env

  postgres:
    image: postgres:13
    ports:
      - "5432:5432"
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: SecretPassword
      POSTGRES_DB: database


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]

  mongo-init-replica:
    image: mongo:latest
    container_name: mongo_init_replica
    depends_on:
      - mongo
    entrypoint: >
      bash -c "
      echo 'Waiting for MongoDB to start...' &&
      sleep 30 &&
      mongosh --host mongo:27017 --eval 'rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"mongo:27017\"}]})' &&
      echo 'Replica set initiated' &&
      tail -f /dev/null
      "
